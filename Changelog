Changelog
v2.0.3 - TBD
- Throw a PcapDeviceNotReadyException() if a capture loop is started before the
  PcapDevice is opened. Patch from Phillip L.
- Re-add the NetworkDevice and IPHelper classes to SharpPcap/Win32 and into the
  SharpPcap.Win32 namespace. Windows only users can use these classes at their own
  risk of breaking portability if their code is executed on a non-Windows platform.
- Add PcapDevices finalizer, call Close() in the destructor. Remove some duplicate
  p/Invoke calls. Don't expose generic lists. Add some specific exceptions to avoid
  throwing generic ones. Check some method results. Patch by Phillip L.
- Fix bad spelling and grammar. Use LastError propery instead of duplicating pinvoke 
  calls. Patch by Phillip L.
- Deprecate Pcap.GetAllDevices() and introduce a new type, PcapDeviceList that is a
  ReadOnlyCollection<PcapDevice>. Patch from Phill L.
- Add static bool PcapDevice.CheckFilter(string filterExpression, out string errorString) 
  to enable the checking of filters before setting them
- Split capture thread out of PcapDevice.cs and into PcapDeviceCaptureLoop.cs
- Switch from pcap_loop()/pcap_breakloop() to pcap_dispatch() in preparation for Linux
  platform specific capture code.
- Remove duplicate and unnecessary 'using' statements, patch from Phill L.
- Enable generation of xml documentation. Enable overflow checking in debug build. Patch from
  Phill L.
- Add a UDPPacket unit test, UDPPacketTest.cs. Test the length of the byte[]
  returned by UDPPacket.UDPData.
- Add UDPPacket override of HeaderLength. Also add a PayloadDataLength accessor and a 
  UDPHeaderLength accessor to match TCPPacket.
- Switch to using Array.Copy() in UDPPacket.UDPData
- Add Header and HeaderLength property overrides to the IPPacket class otherwise a
  polymorphic Packet instance won't behave properly for IPPackets
- Remove IPv4Packet.IpHeaderLength, we already have IPv4Packet.IPHeaderLength
- Move capture loop and thread synchronization over to pcap by using pcap_loop()/pcap_breakloop(),
  patch from Phill L.
- Fix get accessor of ARPPacket.ARPTargetProtoAddress to use the target protocol address
  position, ARP_T_PR_ADDR_POS instead of ARP_S_PR_ADDR_POS, the source protocol address
  position. Bug reported by Houmin Li.
- Move Test/ArpTest.cs to Example 2. Add a new arp packet test, ArpPacketTest.cs that tests
  parsing a arp request and response.
- PcapDevice.GetNextPacket() should check if the device is opened before attempting to 
  use the PcapHandle and throw an exception if the device isn't opened. Fixes an 
  unmanaged segfault that can occur when calling PcapDevice.GetNextPacket() on a 
  closed device
- Phill L. mentioned that Example2 is the same as Example 1, removed Example 2
- Patch from Phill L. to use event handlers as recommended by http://msdn.microsoft.com/en-us/ms182133.aspx
  for packet arrival and statistics events
- Move pinvoke declarations to SafeNativeMethods.cs per a suggestion from Phill L. to 
  follow this MS recommendation, http://msdn.microsoft.com/en-us/ms182161.aspx
- Patch from Phill L. to seal the Version class and rename Version.GetVersionString() 
  to a VersionString property. Fix the examples to use the Version.VersionString 
  property.
- Patch from Phill L. to add pcap_freecode() and free memory allocated by 
  pcap_compile(). Fixes a small memory leak from each call to PcapDevice.SetFilter()
- Fix SharpPcap.dll.config to remove the .dll extension after the pcap library name 
  change from wpcap.dll to wpcap.
- Patch from Phill L. to consistently use the PCAP_DLL const string instead of 
  specifying the library name explicitly. Change library from wpcap.dll to wpcap, 
  Windows should append .dll to the library name as the name contains no other '.' 
  characters.
- Integrated patch from Phill L. to prevent creation of the ChecksumUtils class, all 
  methods are static, and prevent inheriting from the class. Fix a potential overflow 
  issue by using only MemoryStream variables in a limit check.
- Remove TCPPacket.TcpHeaderLength, we already have TCPPacket.TCPHeaderLength
- Integrated patch from Phill L, Lucid Communications, LLC. to fix a null pointer 
  exception that occurs with the PcapHandler() callback from pcap/winpcap.
  
  The crash is due to C# using stdcall calling convention by default and c/c++ using 
  cdecl calling convention by default. These calling conventions are the same for 
  parameters passed to the handler, so the call to PcapHandler() delegate should 
  result in the handler being called properly, returning from the handler is another 
  story.

  Because cdecl requires that the caller cleanup the stack but stdcall requires the
  callee cleanup the stack, the default c# stdcall function would result in stack
  corruption, although the return value in EAX should be passed correctly. This would
  explain observed behavior in the code that notes that the first call works but
  subsequent calls fail, this is due to the stack being corrupted upon the return of
  the first call. The fix is to add a method attribute to set cdecl calling 
  convention.
- Remove error masking from TCPPacket.TCPData set accessor by switching to using a 
  straight Array.Copy()
- Fix issues with TCPPacket.TCPData not returning the correct data
    - Fix TCPPacket.PayloadDataLength, should be (IPPayloadLength - TCPHeaderLength),
      not just (IPPayloadLength)
    - Rewrite and fix TCPPacket.SetData() to perform a single byte[] allocation when 
      building the new TCPPacket, this should improve performance. Stop SetData() from 
      altering the TCPHeaderLength, we are only changing the data. Use the correct 
      value when setting the IPPayloadLength.
    - Add a TCPPacketTest test that reads a pcap capture file that contains a TCP 
      packet with a few extra bytes at the end and verifies that the TCPData is 
      correctly returned with a length of zero. Test fails without above fixes.

v2.0.2 - 20090227
- Rename some methods, accessors and variables to remove the 'Pcap' prefix.
  It doesn't seem useful to keep this prefix since the classes and assembly are
  clearly named as being SharpPcap or Pcap.
- API breaking changes due to renaming (there are others that aren't in
  this list)
    * PcapDevice.PcapOpen()          -> PcapDevice.Open()
    * PcapDevice.PcapClose()         -> PcapDevice.Close()
    * PcapDevice.PcapOpened          -> PcapDevice.Opened
    * PcapDevice.PcapStarted         -> PcapDevice.Started
    * PcapDevice.PcapDescription     -> PcapDevice.Description
    * PcapDevice.PcapName            -> PcapDevice.Name
    * PcapDevice.PcapStartCapture()  -> PcapDevice.StartCapture()
    * PcapDevice.PcapCapture()       -> PcapDevice.Capture()
    * PcapDevice.PcapStopCapture()   -> PcapDevice.StopCapture()
    * PcapDevice.PcapGetNextPacket() -> PcapDevice.GetNextPacket()
    * PcapDevice.PcapSetFilter()     -> PcapDevice.SetFilter()
    * PcapDevice.PcapSendPacket()    -> PcapDevice.SendPacket()

- Added PcapDevice.Addresses, this goes along with PcapDevice.Name, .Description and
  .Flags to provide visibility into the PcapDevice's underlying PcapInterface
- Added accessor, PcapDevice.Interface, to enable the user to retrieve the PcapDevice's
  interface. Enables user to get the ip/hardware/etc addresses that the PcapDevice is
  associated with. Suggestion by Riyaz Ahemed.
- Integrated a patch from Chris Penrose
    * Re-enable checksumming for UDP
    * Remove duplicate IPPacket.IpHeaderLength property, switch code to use the 
      existing IPPacket.IPHeaderLength property
    * Add additional checks to EthernetPacketTest.cs
    * Improve IPv6Packet test to be easier to extend packet checking
- Added comparison to known checksum values, extracted from wireshark, to 
  IPv6PacketTest.TCPChecksumIPv6
- Integrated a patch from Tamir Gal
    * Fixes IPv4 and IPv6 checksumming and adds unit test case for IPv6 checksum
    * Int64RangeTest cases
    * The ability to create an IPPacket from scratch
    * Simplifies the OnesComplement code
    * Re-enabled the checksum tests in PacketsTest.cs
- Remove unnecessary stuff from the SharpPcap namespace by hiding the 
  PcapUnmanagedStructures by moving from a namespace of 
  SharpPcap.PcapUnmanagedStructures to putting the structures inside of an internal 
  class named PcapUnmanagedStructures. Switch some methods from public to internal so 
  they are hidden like the unmanaged structures now are.
- Improve PcapAddress by introducing a Sockaddr container class. Enables handling of 
  hardware addresses that were previously confused and parsed as IP addresses and also 
  resolves a user reported issue with unknown sockaddr.sa_family of 0 by treating this 
  case as unknown.
- Refactor checksumming code into Packets/Util/ChecksumUtils.cs
- Set 'svn propset svn:eol-style native' on all .cs files so we don't have line ending 
  conflicts between Windows and Linux.
- Have ToColoredString() and ToColoredVerboseString() overrides call the base 
  instances of the same methods. This ensures that full output is produced from each 
  packet.
- Introduced 'struct sockaddr_in' and modified Pcap.GetPcapAddress() to use sockaddr_in 
  for IPv4 addresses. Previously the code was incorrectly attempting to extract the
  address from the sockaddr directly. Fixes a user 
  reported bug where IPv4 addresses are displayed incorrectly from PcapDevice.ToString().
- Modifed 'struct pcap_pkthdr' to contain a proper 'struct timeval'. Fixes a bug where
  64 bit platforms would see crashes when reading packets from a PcapOfflineDevice. Crash
  was due to a segfault because the pcap_pkthdr size differed from that of the platform and
  the packet size was coming back as some large and invalid value. The subsequent
  marshalling of the packet data would be out of the range of data and would 
  produce the segfault.
- Fixed a few of the examples in the html documentation.

v2.0.1 - 20090207
- Upgraded the example projects to VS2008 format
- Added the example projects to the main solution so the examples are built along with
  the SharpPcap assembly and the unit tests
- Fixed compile errors in the examples due to the large number of changes in the library
- Removed the no longer needed Examples/SharpPcap.sln and the old assembly dll file
- Added some svn:ignore entries to Example directories to keep the svn status output clean
- Removed the IPAddressList class. Much of this functionality is unused.
- Removed some unused methods of the Convert class
- Removed unused PcapDevice.m_ip member variable and accessor
- Removed unnecessary Packets/SupportClass.cs
- Moved TypesOfService_Fields into IPv4Packet as this field is IPv4 specific. Removed 
  Packets/TypesOfService.cs
- Renamed 'public struct EthernetProtocols_Fields' to 'public struct EtherType' and moved
  the struct inside of class EthernetPacket for better encapsulation. Removed
  EthernetProtocols.cs and EthernetProtocol.cs.
- Move 'public struct IPVersions_Fields' into IPPacket.cs and rename to
  'public enum IPVersions'. Remove now empty IPVersions.cs

v2.0.0 - 20090205
- Renamed the Tamir.IPLib namespace to SharpPcap to match the name of the assembly
- Added Mono support
- Standardize on using System.Net.IPAddress to represent IP addresses instead of a mix
  of strings and long values
- Upgraded project files to VS2008 format
- Use System.Collections.Generic List<> instead of type-specific classes. Remove the
  type specific classes.
- Added test for parsing of Ethernet packets
- Removed SharpPcap.Packets.IPAddress class
- Implemented IPv6 support in IPPacket with the help of a patch from David Bond.
- Fixed access of freed memory by fully processing pcap devices
- Removed several unused classes, files and tests
